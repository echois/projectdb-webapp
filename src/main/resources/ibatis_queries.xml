<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="pm.db">

	<cache />

	<insert id="logChange" parameterType="pm.pojo.Change">
		INSERT INTO changelog (
		`adviserId`,
		`tbl`,
		`tbl_id`,
		`field`,
		`new_val`,
		`old_val`
		) values (
		#{adviserId},
		#{tbl},
		#{tbl_id},
		#{field},		
		#{new_val},
		#{old_val}
		)
	</insert>

	<select id="getChangeLogForTable" parameterType="java.lang.String"
		resultType="pm.pojo.Change">
		SELECT * FROM changelog
		WHERE tbl=#{table}
		ORDER BY timestamp DESC
	</select>

	<select id="getLastModifiedForTable" parameterType="String"
		resultType="java.lang.String">
		SELECT MAX(lastModified)
		FROM ${value}
	</select>

	<select id="getProjectById" parameterType="java.lang.Integer"
		resultType="pm.pojo.Project">
		SELECT *
		FROM project
		WHERE id = #{id}
	</select>
	
	<select id="getProjectByCode" parameterType="String"
		resultType="pm.pojo.Project">
		SELECT *
		FROM project
		WHERE projectCode = #{code}
	</select>

	<select id="getResearcherById" parameterType="java.lang.Integer"
		resultType="pm.pojo.Researcher">
		SELECT *
		FROM researcher
		WHERE id = #{id}
	</select>

	<select id="getAdviserById" parameterType="java.lang.Integer"
		resultType="pm.pojo.Adviser">
		SELECT *
		FROM adviser
		WHERE id = #{id}
	</select>

	<select id="getAdviserByTuakiriUniqueId" parameterType="java.lang.String"
		resultType="pm.pojo.Adviser">
		SELECT *
		FROM adviser
		WHERE tuakiriUniqueId = #{id}
	</select>

	<select id="getAdviserByDrupalId" parameterType="java.lang.String"
		resultType="pm.pojo.Adviser">
		SELECT *
		FROM adviser
		WHERE id IN
		( SELECT adviserId FROM
		adviser_properties WHERE propname='drupalId'
		AND propvalue=#{id} )
	</select>

	<select id="getDrupalIdByAdviserId" parameterType="java.lang.Integer"
		resultType="java.lang.String">
		SELECT propvalue
		FROM adviser_properties
		WHERE
		propname='drupalId' AND adviserId=#{id}
	</select>

	<select id="getSiteById" parameterType="java.lang.Integer"
		resultType="pm.pojo.Site">
		SELECT *
		FROM site
		WHERE id = #{id}
	</select>

	<select id="getKpiById" resultType="pm.pojo.Kpi">
		SELECT *
		FROM kpi
		WHERE id =
		#{id}
	</select>

	<select id="getInstitutionalRoleById" parameterType="java.lang.Integer"
		resultType="pm.pojo.InstitutionalRole">
		SELECT *
		FROM institutionalrole
		WHERE id = #{id}
	</select>

	<select id="getAdviserRoleById" parameterType="java.lang.Integer"
		resultType="pm.pojo.AdviserRole">
		SELECT *
		FROM adviserrole
		WHERE id = #{id}
	</select>

	<select id="getResearcherRoleById" parameterType="java.lang.Integer"
		resultType="pm.pojo.ResearcherRole">
		SELECT *
		FROM researcherrole
		WHERE id = #{id}
	</select>

	<select id="getResearchOutputTypeById" parameterType="java.lang.Integer"
		resultType="pm.pojo.ResearchOutputType">
		SELECT *
		FROM researchoutputtype
		WHERE id = #{id}
	</select>

	<select id="getProjectTypeById" parameterType="java.lang.Integer"
		resultType="pm.pojo.ProjectType">
		SELECT *
		FROM projecttype
		WHERE id = #{id}
	</select>

	<select id="getFollowUpById" parameterType="java.lang.Integer"
		resultType="pm.pojo.FollowUp">
		SELECT *
		FROM projectfollowup
		WHERE id = #{id}
	</select>

	<select id="getReviewById" parameterType="java.lang.Integer"
		resultType="pm.pojo.Review">
		SELECT *
		FROM projectreview
		WHERE id = #{id}
	</select>

	<select id="getAdviserActionById" parameterType="java.lang.Integer"
		resultType="pm.pojo.AdviserAction">
		SELECT *
		FROM adviseraction
		WHERE id = #{id}
	</select>

	<select id="getProjects" resultType="pm.pojo.Project">
		SELECT *
		FROM project
	</select>

	<select id="getResearchers" resultType="pm.pojo.Researcher">
		SELECT *
		FROM researcher
		ORDER BY fullName
	</select>

	<select id="getAdvisers" resultType="pm.pojo.Adviser">
		SELECT *
		FROM adviser
		ORDER BY
		fullName
	</select>

	<select id="getNumProjectsForAdviser" parameterType="java.lang.Integer"
		resultType="java.lang.Integer">
		SELECT COUNT(*)
		FROM adviser_project as ap
		INNER JOIN project
		as p on p.id=ap.projectId
		WHERE adviserId = #{id} AND
		adviserRoleId = 1
		AND p.statusId!=4

	</select>

	<select id="getResearchersOnProject" resultType="pm.pojo.Researcher">
		SELECT *
		FROM
		researcher
		WHERE id IN
		( SELECT researcherId FROM researcher_project
		WHERE projectId=#{id} )
		ORDER BY fullName
	</select>

	<select id="getAdvisersOnProject" resultType="pm.pojo.Adviser">
		SELECT *
		FROM
		adviser
		WHERE id IN
		( SELECT adviserId FROM adviser_project WHERE
		projectId=#{id} )
		ORDER BY fullName
	</select>

	<select id="getFacilities" resultType="pm.pojo.Facility">
		SELECT *
		FROM facility
		ORDER BY id
	</select>

	<select id="getFacilityById" resultType="pm.pojo.Facility"
		parameterType="java.lang.Integer">
		SELECT *
		FROM facility
		WHERE id=#{id}
	</select>

	<select id="getKpis" resultType="pm.pojo.Kpi">
		SELECT *
		FROM kpi
		ORDER BY id
	</select>

	<select id="getKpiCodes" resultType="pm.pojo.KpiCode">
		SELECT *
		FROM kpicode
		ORDER BY
		id
	</select>

	<select id="getKpiCodeNameById" parameterType="java.lang.Integer"
		resultType="java.lang.String">
		SELECT code
		FROM kpicode
		WHERE id=#{id}
	</select>

	<select id="getFacilitiesOnProject" parameterType="java.lang.Integer"
		resultType="pm.pojo.Facility">
		SELECT *
		FROM facility
		WHERE id IN
		( SELECT facilityId FROM
		project_facility WHERE projectId=#{id} )
		ORDER BY name
	</select>

	<select id="getResearchersNotOnList" parameterType="java.util.List"
		resultType="pm.pojo.Researcher">
		SELECT *
		FROM researcher
		WHERE id NOT IN
		<foreach item="item" index="index" collection="list" open="("
			separator="," close=")">
			#{item}
		</foreach>
		ORDER BY fullName
	</select>

	<select id="getAdvisersNotOnList" parameterType="java.util.List"
		resultType="pm.pojo.Adviser">
		SELECT *
		FROM adviser
		WHERE id NOT IN
		<foreach item="item" index="index" collection="list" open="("
			separator="," close=")">
			#{item}
		</foreach>
		ORDER BY fullName
	</select>

	<select id="getFacilitiesNotOnList" parameterType="java.util.List"
		resultType="pm.pojo.Facility">
		SELECT *
		FROM facility
		WHERE id NOT IN
		<foreach item="item" index="index" collection="list" open="("
			separator="," close=")">
			#{item}
		</foreach>
		ORDER BY name
	</select>

	<select id="getResearcherRoles" resultType="pm.pojo.ResearcherRole">
		SELECT *
		FROM
		researcherrole
		ORDER BY id
	</select>

	<select id="getAdviserRoles" resultType="pm.pojo.AdviserRole">
		SELECT *
		FROM adviserrole
		ORDER BY id
	</select>

	<select id="getInstitutionalRoles" resultType="pm.pojo.InstitutionalRole">
		SELECT *
		FROM
		institutionalrole
		ORDER BY name
	</select>

	<select id="getRPLinksForProjectId" parameterType="java.lang.Integer"
		resultType="pm.pojo.RPLink">
		SELECT *
		FROM researcher_project
		WHERE projectId = #{id}
	</select>

	<select id="getAPLinksForProjectId" parameterType="java.lang.Integer"
		resultType="pm.pojo.APLink">
		SELECT *
		FROM adviser_project
		WHERE projectId = #{id}
	</select>

	<select id="getReviewsForProjectId" parameterType="java.lang.Integer"
		resultType="pm.pojo.Review">
		SELECT *
		FROM projectreview
		WHERE projectId = #{id}
	</select>

	<select id="getFollowUpsForProjectId" parameterType="java.lang.Integer"
		resultType="pm.pojo.FollowUp">
		SELECT *
		FROM projectfollowup
		WHERE projectId = #{id}
	</select>

	<select id="getResearchOutputsForProjectId" parameterType="java.lang.Integer"
		resultType="pm.pojo.ResearchOutput">
		SELECT *
		FROM researchoutput
		WHERE projectId = #{id}
	</select>

	<select id="getAttachmentsForReviewId" parameterType="java.lang.Integer"
		resultType="pm.pojo.Attachment">
		SELECT *
		FROM attachment
		WHERE reviewId = #{id}
	</select>

	<select id="getAttachmentsForFollowUpId" parameterType="java.lang.Integer"
		resultType="pm.pojo.Attachment">
		SELECT *
		FROM attachment
		WHERE followupId = #{id}
	</select>

	<select id="getAttachmentsForAdviserActionId" parameterType="java.lang.Integer"
		resultType="pm.pojo.Attachment">
		SELECT *
		FROM attachment
		WHERE adviserActionId = #{id}
	</select>

	<select id="getAdviserActionsForProjectId" parameterType="java.lang.Integer"
		resultType="pm.pojo.AdviserAction">
		SELECT *
		FROM adviseraction
		WHERE projectId = #{id}
	</select>

	<select id="getProjectKpis" parameterType="java.lang.Integer"
		resultType="pm.pojo.ProjectKpi">
		SELECT *
		FROM project_kpi
	</select>

	<select id="getProjectStatuses" resultType="pm.pojo.ProjectStatus">
		SELECT *
		FROM
		project_status
		ORDER BY id
	</select>

	<select id="getProjectStatusById" parameterType="java.lang.Integer"
		resultType="java.lang.String">
		SELECT name
		FROM project_status
		WHERE id=#{id}
	</select>

	<select id="getResearcherStatuses" resultType="pm.pojo.ResearcherStatus">
		SELECT *
		FROM
		researcher_status
		ORDER BY id
	</select>

	<select id="getResearcherStatusById" parameterType="java.lang.Integer"
		resultType="java.lang.String">
		SELECT name
		FROM researcher_status
		WHERE id=#{id}
	</select>

	<select id="getResearchOutput" parameterType="java.lang.Integer"
		resultType="pm.pojo.ResearchOutput">
		SELECT *
		FROM researchoutput
	</select>

	<select id="getKpisForProjectId" parameterType="java.lang.Integer"
		resultType="pm.pojo.ProjectKpi">
		SELECT *
		FROM project_kpi
		WHERE projectId = #{id}
	</select>

	<select id="getPropertiesForProjectId" parameterType="java.lang.Integer"
		resultType="pm.pojo.ProjectProperty">
		SELECT *
		FROM project_properties
		WHERE projectId = #{id}
	</select>

	<select id="getProjectProperty" parameterType="java.lang.Integer"
		resultType="pm.pojo.ProjectProperty">
		SELECT *
		FROM project_properties
		WHERE id = #{id}
	</select>

	<select id="getPropnames" resultType="java.lang.String">
		SELECT DISTINCT propname
		FROM project_properties
	</select>

	<select id="getProjectsForResearcherId" parameterType="java.lang.Integer"
		resultType="pm.pojo.Project">
		SELECT *
		FROM project
		WHERE id IN
		( SELECT projectId FROM
		researcher_project WHERE researcherId=#{id} )
	</select>

	<select id="getProjectsForAdviserId" parameterType="java.lang.Integer"
		resultType="pm.pojo.Project">
		SELECT *
		FROM project
		WHERE id IN
		( SELECT projectId FROM
		adviser_project WHERE
		adviserId=#{id}
		)
	</select>

	<insert id="createProject" parameterType="pm.pojo.Project">
		INSERT INTO project (
		projectCode,
		projectTypeId,
		statusId,
		name,
		description,
		hostInstitution,
		startDate,
		nextReviewDate,
		nextFollowUpDate,
		endDate,
		notes,
		todo,
		requirements
		) values (
		#{projectCode},
		#{projectTypeId},
		#{statusId},
		#{name},
		#{description},
		#{hostInstitution},
		#{startDate},
		#{nextReviewDate},
		#{nextFollowUpDate},
		#{endDate},
		#{notes},
		#{todo},
		#{requirements}
		)
		<selectKey keyProperty="id" resultType="int">
			SELECT
			LAST_INSERT_ID() AS id
		</selectKey>
	</insert>

	<insert id="createRPLink" parameterType="pm.pojo.RPLink">
		INSERT INTO
		researcher_project (
		researcherId,
		projectId,
		researcherRoleId,
		notes
		)
		values (
		#{researcherId},
		#{projectId},
		#{researcherRoleId},
		#{notes}
		)
	</insert>

	<insert id="createAPLink" parameterType="pm.pojo.APLink">
		INSERT INTO
		adviser_project (
		adviserId,
		projectId,
		adviserRoleId,
		notes
		) values (
		#{adviserId},
		#{projectId},
		#{adviserRoleId},
		#{notes}
		)
	</insert>
	
	<select id="getAffiliationByInstitutionCode" parameterType="java.lang.String"
		resultType="pm.pojo.Affiliation">
		SELECT DISTINCT
		IFNULL(i.name,'') as institution, IFNULL(i.code,'') as institutionCode, '' as division, '' as divisionCode, '' as
		department, '' as departmentCode
		FROM
		institution i where i.code= #{institutionCode}

		UNION

		SELECT IFNULL(i.name,'') as institution, '' as institutionCode,
		IFNULL(d.name,'') as division,  IFNULL(d.code, '') as divisionCode,''
		as department, '' as departmentCode
		FROM institution i
		JOIN division d on i.id = d.institutionId and i.code = #{institutionCode}

		UNION

		SELECT IFNULL(i.name,'')
		AS institution, IFNULL(i.code,'') as institutionCode, IFNULL(di.name,'') AS division,
		IFNULL(di.code,'') as divisionCode, IFNULL(de.name,'') AS
		department, IFNULL(de.name,'') as departmentCode
		FROM institution i
		JOIN division di ON i.id = di.institutionId and i.code = #{institutionCode}
		JOIN department de on di.id = de.divisionId

		ORDER
		BY institution, division, department
		
	</select>
	
	<insert id="createResearcher" parameterType="pm.pojo.Researcher">
		INSERT INTO researcher (
		fullName,
		preferredName,
		statusId,
		pictureUrl,
		email,
		phone,
		institution,
		division,
		department,
		institutionalRoleId,
		startDate,
		endDate,
		notes
		) values (
		#{fullName},
		#{preferredName},
		#{statusId},
		#{pictureUrl},
		#{email},
		#{phone},
		#{institution},
		#{division},
		#{department},
		#{institutionalRoleId},
		#{startDate},
		#{endDate},
		#{notes}
		)
		<selectKey keyProperty="id" resultType="int">
			SELECT
			LAST_INSERT_ID() AS id
		</selectKey>
	</insert>

	<insert id="createAdviser" parameterType="pm.pojo.Adviser">
		INSERT INTO adviser (
		fullName,
		pictureUrl,
		email,
		phone,
		institution,
		division,
		department,
		startDate,
		endDate,
		notes
		) values (
		#{fullName},
		#{pictureUrl},
		#{email},
		#{phone},
		#{institution},
		#{division},
		#{department},
		#{startDate},
		#{endDate},
		#{notes}
		)
		<selectKey keyProperty="id" resultType="int">
			SELECT
			LAST_INSERT_ID() AS id
		</selectKey>
	</insert>

	<insert id="createReview" parameterType="pm.pojo.Review">
		INSERT INTO projectreview (
		projectId,
		adviserId,
		date,
		notes
		) values (
		#{projectId},
		#{adviserId},
		#{date},
		#{notes}
		)
		<selectKey keyProperty="id" resultType="int">
			SELECT
			LAST_INSERT_ID() AS id
		</selectKey>
	</insert>

	<insert id="upsertProjectProperty" parameterType="pm.pojo.ProjectProperty">
		REPLACE INTO
		project_properties (
		id,
		projectId,
		facilityId,
		propname,
		propvalue
		) values
		(
		#{id},
		#{projectId},
		#{facilityId},
		#{propname},
		#{propvalue}
		)
	</insert>

	<insert id="createFollowUp" parameterType="pm.pojo.FollowUp">
		INSERT INTO projectfollowup (
		projectId,
		adviserId,
		date,
		notes
		) values (
		#{projectId},
		#{adviserId},
		#{date},
		#{notes}
		)
		<selectKey keyProperty="id" resultType="int">
			SELECT
			LAST_INSERT_ID() AS id
		</selectKey>
	</insert>

	<insert id="createResearchOutput" parameterType="pm.pojo.ResearchOutput">
		INSERT INTO
		researchoutput (
		projectId,
		adviserId,
		typeId,
		description,
		link,
		date
		)
		values (
		#{projectId},
		#{adviserId},
		#{typeId},
		#{description},
		#{link},
		#{date}
		)
	</insert>

	<insert id="createAttachment" parameterType="pm.pojo.Attachment">
		INSERT INTO
		attachment (
		projectId,
		followUpId,
		reviewId,
		adviserActionId,
		description,
		link,
		date
		) values (
		#{projectId},
		#{followUpId},
		#{reviewId},
		#{adviserActionId},
		#{description},
		#{link},
		#{date}
		)
	</insert>

	<insert id="createAdviserAction" parameterType="pm.pojo.AdviserAction">
		INSERT INTO adviseraction (
		projectId,
		date,
		adviserId,
		action
		) values (
		#{projectId},
		#{date},
		#{adviserId},
		#{action}
		)
		<selectKey keyProperty="id" resultType="int">
			SELECT
			LAST_INSERT_ID() AS id
		</selectKey>
	</insert>

	<insert id="createProjectFacility" parameterType="pm.pojo.ProjectFacility">
		INSERT INTO
		project_facility (
		projectId,
		facilityId
		) values (
		#{projectId},
		#{facilityId}
		)
	</insert>

	<insert id="createProjectKpi" parameterType="pm.pojo.ProjectKpi">
		INSERT INTO
		project_kpi (
		kpiId,
		projectId,
		date,
		adviserId,
		value,
		notes,
		code
		) values (
		#{kpiId},
		#{projectId},
		#{date},
		#{adviserId},
		#{value},
		#{notes},
		#{code}
		)
	</insert>

	<update id="updateProject" parameterType="pm.pojo.Project">
		UPDATE project set
		projectCode = #{projectCode},
		projectTypeId = #{projectTypeId},
		statusId = #{statusId},
		name = #{name},
		description = #{description},
		hostInstitution = #{hostInstitution},
		startDate = #{startDate},
		nextReviewDate = #{nextReviewDate},
		nextFollowUpDate =
		#{nextFollowUpDate},
		endDate = #{endDate},
		requirements =
		#{requirements},
		notes = #{notes},
		todo = #{todo},
		lastModified = now()
		WHERE id = #{id}
	</update>

	<update id="updateResearcher" parameterType="pm.pojo.Researcher">
		UPDATE researcher
		set
		fullName = #{fullName},
		preferredName = #{preferredName},
		statusId =
		#{statusId},
		pictureUrl = #{pictureUrl},
		email = #{email},
		phone =
		#{phone},
		institution = #{institution},
		division = #{division},
		department = #{department},
		institutionalRoleId =
		#{institutionalRoleId},
		startDate = #{startDate},
		endDate = #{endDate},
		notes = #{notes}
		WHERE id = #{id}
	</update>

	<update id="updateAdviser" parameterType="pm.pojo.Adviser">
		UPDATE adviser set
		fullName = #{fullName},
		pictureUrl = #{pictureUrl},
		email = #{email},
		phone = #{phone},
		institution = #{institution},
		division = #{division},
		department = #{department},
		startDate = #{startDate},
		endDate =
		#{endDate},
		notes = #{notes}
		WHERE id = #{id}
	</update>

	<delete id="deleteProject" parameterType="java.lang.Integer">
		DELETE FROM project
		WHERE id = #{id}
	</delete>

	<delete id="deleteResearcher" parameterType="java.lang.Integer">
		DELETE FROM
		researcher
		WHERE id = #{id}
	</delete>

	<delete id="deleteAdviser" parameterType="java.lang.Integer">
		DELETE FROM adviser
		WHERE id = #{id}
	</delete>

	<delete id="deleteRPLinks" parameterType="java.lang.Integer">
		DELETE FROM
		researcher_project
		WHERE
		projectId = #{id}
	</delete>

	<delete id="deleteRPLink" parameterType="java.util.Map">
		DELETE FROM
		researcher_project
		WHERE
		researcherId = #{researcherId} AND
		projectId =
		#{projectId}
	</delete>

	<delete id="deleteAPLinks" parameterType="java.lang.Integer">
		DELETE FROM
		adviser_project
		WHERE
		projectId = #{id}
	</delete>

	<delete id="deleteAPLink" parameterType="java.util.Map">
		DELETE FROM
		adviser_project
		WHERE
		adviserId = #{adviserId} AND
		projectId =
		#{projectId}
	</delete>

	<delete id="deleteReviews" parameterType="java.lang.Integer">
		DELETE FROM
		projectreview
		WHERE projectId = #{id}
	</delete>

	<delete id="deleteReview" parameterType="java.lang.Integer">
		DELETE FROM
		projectreview
		WHERE id = #{id}
	</delete>

	<delete id="deleteFollowUps" parameterType="java.lang.Integer">
		DELETE FROM
		projectfollowup
		WHERE projectId = #{id}
	</delete>

	<delete id="deleteFollowUp" parameterType="java.lang.Integer">
		DELETE FROM
		projectfollowup
		WHERE id = #{id}
	</delete>

	<delete id="deleteResearchOutputs" parameterType="java.lang.Integer">
		DELETE FROM
		researchoutput
		WHERE projectId = #{id}
	</delete>

	<delete id="deleteResearchOutput" parameterType="java.lang.Integer">
		DELETE FROM
		researchoutput
		WHERE id = #{id}
	</delete>

	<delete id="deleteAdviserActions" parameterType="java.lang.Integer">
		DELETE FROM
		adviseraction
		WHERE projectId = #{id}
	</delete>

	<delete id="deleteProjectFacilities" parameterType="java.lang.Integer">
		DELETE FROM
		project_facility
		WHERE projectId = #{id}
	</delete>

	<delete id="deleteAdviserAction" parameterType="java.lang.Integer">
		DELETE FROM
		adviseraction
		WHERE id = #{id}
	</delete>

	<delete id="deleteFacilityFromProject" parameterType="java.util.Map">
		DELETE FROM
		project_facility
		WHERE projectId = #{projectId} AND
		facilityId =
		#{facilityId}
	</delete>

	<delete id="deleteProjectKpis" parameterType="java.lang.Integer">
		DELETE FROM
		project_kpi
		WHERE projectId = #{id}
	</delete>

	<delete id="deleteProjectKpi" parameterType="java.lang.Integer">
		DELETE FROM
		project_kpi
		WHERE id = #{id}
	</delete>

	<delete id="deleteProjectProperty" parameterType="java.lang.Integer">
		DELETE FROM
		project_properties
		WHERE id = #{id}
	</delete>

	<select id="getSites" resultType="pm.pojo.Site">
		SELECT *
		FROM site
		ORDER BY name
	</select>

	<select id="getProjectTypes" resultType="pm.pojo.ProjectType">
		SELECT *
		FROM projecttype
		ORDER BY name
	</select>

	<select id="getResearchOutputTypes" resultType="pm.pojo.ResearchOutputType">
		SELECT *
		FROM
		researchoutputtype
		ORDER BY name
	</select>
	
	<insert id="createInstitution" parameterType="pm.pojo.Affiliation">
		INSERT INTO	institution(name, code) 
		values (#{institution}, #{institutionCode})
	</insert>
	
	<insert id="createDivision" parameterType="pm.pojo.Affiliation">
		INSERT INTO	division(institutionId, name, code) 
		SELECT id, #{division}, #{divisionCode}
		FROM institution
		WHERE code=#{institutionCode}
	</insert>
	
	<insert id="createDepartment" parameterType="pm.pojo.Affiliation">
		INSERT INTO department(institutionId, divisionId, name, code)
        SELECT i.id, d.id, #{department},#{departmentCode}
        FROM institution i, division d where i.code=#{institutionCode} and d.code=#{divisionCode}
    </insert>
    
	<select id="getAffiliations" resultType="pm.pojo.Affiliation">
		SELECT DISTINCT
		IFNULL(i.name,'') as institution, '' as division, '' as
		department
		FROM
		institution i

		UNION

		SELECT IFNULL(i.name,'') as institution,
		IFNULL(d.name,'') as division, ''
		as department
		FROM institution i
		LEFT
		JOIN division d on i.id = d.institutionId

		UNION

		SELECT IFNULL(i.name,'')
		AS institution, IFNULL(di.name,'') AS division,
		IFNULL(de.name,'') AS
		department
		FROM institution i
		LEFT JOIN division di ON i.id =
		di.institutionId
		LEFT JOIN department de on di.id = de.divisionId

		ORDER
		BY institution, division, department
	</select>
	
	<select id="getInstitutions" resultType="java.lang.String">
		SELECT DISTINCT name
		FROM institution
		ORDER BY name
	</select>

	<!-- Temp projects -->

	<insert id="createTempProject" parameterType="pm.pojo.TempProject">
		INSERT INTO tempproject (
		id,
		owner,
		lastVisited,
		projectString
		) values (
		#{id},
		#{owner},
		#{lastVisited},
		#{projectString}
		)
		<selectKey keyProperty="id" resultType="int">
			SELECT
			LAST_INSERT_ID() AS id
		</selectKey>
	</insert>

	<update id="updateTempProjectLastVisited" parameterType="java.util.Map">
		UPDATE
		tempproject set
		lastVisited = #{lastVisited}
		WHERE id = #{id}
	</update>

	<update id="updateTempProject" parameterType="pm.pojo.TempProject">
		UPDATE tempproject
		set
		lastVisited = #{lastVisited},
		projectString = #{projectString}
		WHERE
		id = #{id}
	</update>

	<delete id="deleteTempProject" parameterType="java.lang.Integer">
		DELETE FROM
		tempproject
		WHERE id = #{id}
	</delete>

	<delete id="deleteExpiredTempProjects" parameterType="java.lang.Long">
		DELETE FROM
		tempproject
		WHERE lastVisited &lt; #{maxTimestamp}
	</delete>

	<select id="getTempProjectById" parameterType="java.lang.Integer"
		resultType="pm.pojo.TempProject">
		SELECT *
		FROM tempproject
		WHERE id = #{id}
	</select>

	<select id="countOccurences" parameterType="java.lang.Integer"
		resultType="java.lang.Integer">
		SELECT COUNT(id) from tempproject
		WHERE id = #{id}
	</select>

	<select id="getOwner" parameterType="java.lang.Integer"
		resultType="java.lang.String">
		SELECT owner from tempproject
		WHERE id = #{id}
	</select>

	<select id="getMinId" resultType="java.lang.Integer">
		SELECT MIN(id) from tempproject
	</select>

	<select id="getLastProjectCode" parameterType="java.lang.String"
		resultType="java.lang.String">
		SELECT MAX( projectCode )
		FROM `project`
		WHERE `projectCode`
		LIKE CONCAT(#{code}, '%')
	</select>

	<select id="getInstitutionCodeFromName" parameterType="java.lang.String"
		resultType="java.lang.String">
		SELECT code
		FROM `institution`
		WHERE name = #{name}
	</select>

	<select id="getResearcherProperties" parameterType="java.lang.Integer"
		resultType="pm.pojo.ResearcherProperty">
		SELECT *
		FROM `researcher_properties`
		WHERE
		researcherId=#{id}
	</select>

	<insert id="upsertResearcherProperty" parameterType="pm.pojo.ResearcherProperty">
		REPLACE INTO
		researcher_properties (
		researcherId,
		siteId,
		propname,
		propvalue
		) values
		(
		#{researcherId},
		#{siteId},
		#{propname},
		#{propvalue}
		)
	</insert>
</mapper>
